// QueryDSL 설정
buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.17'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'

	id "org.asciidoctor.jvm.convert" version "3.3.2"    // (1)
	// .adoc 파일 생성을 위한 플러그인
}

group = 'com.miraclepat'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

// (2)
ext {
	set('snippetsDir', file("build/generated-snippets"))
	// snippetsDir : 테스트 실행시 생성되는 응답을 저장할 디렉토리 지정
}

// (3)
configurations {
	asciidoctorExtensions
	// asciidoctorExtensions : Asciidoctor의 확장 기능을 사용하기 위한 설정
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// querydsl 설정
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"

	// ===  하이버네이트 공간 검색 특화 - 추가됨 ===
	implementation 'org.hibernate:hibernate-spatial'
	implementation 'com.querydsl:querydsl-spatial'
	// ========================================

	//WebClient->카카오 서버에서 정보 받기 위해
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	//파이어베이스 auth
	implementation 'com.google.firebase:firebase-admin:9.2.0'

	// (4) rest docs 의존성 추가
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	// (5)  asciidoctor 의존성 추가 configration에서 지정한 의존 설정을 사용
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

// (6) test 할 때 snippetsDir에 생성된 응답을 asciidoctor로 변환하여 .adoc 파일 생성
tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

// (7):asciidoctor task 실행 시, Asciidoctor 기능을 사용하기 위해 :asciidoctor task에 asciidoctorExtensions을 설정
tasks.named('asciidoctor') {
	baseDirFollowsSourceFile()
	configurations "asciidoctorExtensions"
	inputs.dir snippetsDir
	dependsOn test
}

// (8)
task copyDocument(type: Copy) {
	dependsOn asciidoctor            // (8-1) :asciidoctor task가 실행된 후에 task가 실행되도록 의존성을 설정
	from file("${asciidoctor.outputDir}")   // (8-2)"build/docs/asciidoc/" 경로에 생성되는 index.html을 copy
	into file("src/main/resources/static/docs")   // (8-3) "src/main/resources/static/docs" 경로로 index.html을 추가
}

build {
	dependsOn copyDocument  // (9) build task 가 실행되기 전에 copyDocument가 먼저 수행되도록
}

// (10)
bootJar {
	dependsOn copyDocument    // (10-1)
	from ("${asciidoctor.outputDir}") {  // (10-2)
		into 'static/docs'     // (10-3)
	}
}

//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}
//querydsl 추가 끝
