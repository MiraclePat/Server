name: Build and Deploy Spring Boot to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  
env:
  S3_BUCKET_NAME: miraclepat-cicd-bucket
  AWS_REGION: ap-northeast-2
  CODEDEPLOY_NAME: miraclepat_cicd
  CODEDEPLOY_GROUP: miraclepat-CD-group

jobs:
  build:
    runs-on: ubuntu-latest

    steps:          
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # yml 파일 생성(1) -key
      - name: make application-key.yml
        run: |
          cd ./src/main/resources
          touch ./application-key.yml
          echo "${{ secrets.APPLICATION_KEY }}" > ./application-key.yml
        shell: bash

      - name: create-json
        id: create-json
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: "miracle-pat-firebase-adminsdk.json"
          json: ${{ secrets.FIREBASE_SDK }}
          dir: 'src/main/resources/'

      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          host port: 3306
          container port: 3306
          mysql database: 'board'
          mysql user: 'test'
          mysql password: ${{ secrets.PASSWORD }}

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash
      
      - name: Build with Gradle
        env:
          DATASOURCE: jdbc:mysql://localhost:3306/board
          USERNAME: 'test'
          PASSWORD: ${{ secrets.PASSWORD }}
        run: ./gradlew build
        shell: bash
        
      - name: Make zip file
        run: zip -r ./$GITHUB_SHA.zip .
        shell: bash
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CICD_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CICD_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Upload to S3
        run: aws s3 cp --region ${{ env.AWS_REGION }} ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip

      - name: Code Deploy
        run: aws deploy create-deployment --application-name $CODEDEPLOY_NAME --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name $CODEDEPLOY_GROUP --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$GITHUB_SHA.zip
